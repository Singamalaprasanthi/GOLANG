
ARITHMETIC OPERATORS :

EXAMPLE 1 :

package main 
   
import "fmt"
   
func main() { 
   p:= 10
   q:= 20
      
   // Addition 
   result1:= p + q 
   fmt.Printf("Result of p + q = %d", result1) 
      
   // Subtraction 
   result2:= p - q 
   fmt.Printf("\nResult of p - q = %d", result2) 
      
   // Multiplication 
   result3:= p * q 
   fmt.Printf("\nResult of p * q = %d", result3) 
      
   // Division 
   result4:= p / q 
   fmt.Printf("\nResult of p / q = %d", result4) 
      
   // Modulus 
   result5:= p % q 
   fmt.Printf("\nResult of p %% q = %d", result5) 
} 

OUTPUT :

Result of p + q = 30
Result of p - q = -10
Result of p * q = 200
Result of p / q = 0
Result of p % q = 10


EXAMPLE 2 :

package main 
   
import "fmt"
   
func main() { 
   p:= 30
   q:= 20
      
   // Addition 
   result1:= p + q 
   fmt.Printf("Result of p + q = %d", result1) 
      
   // Subtraction 
   result2:= p - q 
   fmt.Printf("\nResult of p - q = %d", result2) 
      
   // Multiplication 
   result3:= p * q 
   fmt.Printf("\nResult of p * q = %d", result3) 
      
   // Division 
   result4:= p / q 
   fmt.Printf("\nResult of p / q = %d", result4) 
      
   // Modulus 
   result5:= p % q 
   fmt.Printf("\nResult of p %% q = %d", result5) 
} 

OUTPUT :

Result of p + q = 50
Result of p - q = 10
Result of p * q = 600
Result of p / q = 1
Result of p % q = 10

EXAMPLE 3 :

package main

import "fmt"

func main() {
	var x, y = 35, 7

	fmt.Printf("x + y = %d\n", x+y)
	fmt.Printf("x - y = %d\n", x-y)
	fmt.Printf("x * y = %d\n", x*y)
	fmt.Printf("x / y = %d\n", x/y)
	fmt.Printf("x mod y = %d\n", x%y)

	x++
	fmt.Printf("x++ = %d\n", x)

	y--
	fmt.Printf("y-- = %d\n", y)
}

OUTPUT :

x + y = 42
x - y = 28
x * y = 245
x / y = 5
x mod y = 0
x++ = 36
y-- = 6


RELATIONAL OPERATORS :

EXAMPLE 1:

package main 
   
import "fmt"
   
func main() { 
   p:= 34
   q:= 20
      
   // ‘=='(Equal To) 
   result1:= p == q 
   fmt.Println(result1) 
      
   // ‘!='(Not Equal To) 
   result2:= p != q 
   fmt.Println(result2) 
      
   // ‘<‘(Less Than) 
   result3:= p < q 
   fmt.Println(result3) 
      
   // ‘>'(Greater Than) 
   result4:= p > q 
   fmt.Println(result4) 
      
   // ‘>='(Greater Than Equal To) 
   result5:= p >= q 
   fmt.Println(result5) 
      
   // ‘<='(Less Than Equal To) 
   result6:= p <= q 
   fmt.Println(result6) 
      
      
} 

OUTPUT :

false
true
false
true
true
false

EXAMPLE 2 :

package main

import "fmt"

func main() {
	var x, y = 15, 25
	x = y
	fmt.Println("= ", x)

	x = 15
	x += y
	fmt.Println("+=", x)

	x = 50
	x -= y
	fmt.Println("-=", x)

	x = 2
	x *= y
	fmt.Println("*=", x)

	x = 100
	x /= y
	fmt.Println("/=", x)

	x = 40
	x %= y
	fmt.Println("%=", x)
}

OUTPUT :

=  25
+= 40
-= 25
*= 50
/= 4
%= 15

COMPARISION OPERATORS :

EXAMPLE 1:
package main

import "fmt"

func main() {
	var x, y = 15, 25

	fmt.Println(x == y)
	fmt.Println(x != y)
	fmt.Println(x < y)
	fmt.Println(x <= y)
	fmt.Println(x > y)
	fmt.Println(x >= y)
}

OUTPUT :

false
true
true
true
false
false


LOGICAL OPERATORS :

EXAMPLE 1 :

package main 
import "fmt"
func main() { 
    var p int = 23
    var q int = 60
        
    if(p!=q && p<=q){  
        fmt.Println("True") 
    } 
        
    if(p!=q || p<=q){  
        fmt.Println("True") 
    } 
        
    if(!(p==q)){  
        fmt.Println("True") 
    } 
        
} 

OUTPUT :

True
True
True

EXAMPLE 2 :

package main

import "fmt"

func main() {
	var x, y, z = 10, 20, 30

	fmt.Println(x < y && x > z)
	fmt.Println(x < y || x > z)
	fmt.Println(!(x == y && x > z))

OUTPUT :

false
true
true
 
BITWISE OPERATORS :

EXAMPLE 1 :

package main 
   
import "fmt"
   
func main() { 
   p:= 34
   q:= 20
      
   // & (bitwise AND) 
   result1:= p & q 
   fmt.Printf("Result of p & q = %d", result1) 
      
   // | (bitwise OR) 
   result2:= p | q 
   fmt.Printf("\nResult of p | q = %d", result2) 
      
   // ^ (bitwise XOR) 
   result3:= p ^ q 
   fmt.Printf("\nResult of p ^ q = %d", result3) 
      
   // << (left shift) 
   result4:= p << 1
   fmt.Printf("\nResult of p << 1 = %d", result4) 
      
   // >> (right shift) 
   result5:= p >> 1
   fmt.Printf("\nResult of p >> 1 = %d", result5) 
      
   // &^ (AND NOT) 
   result6:= p &^ q 
   fmt.Printf("\nResult of p &^ q = %d", result6) 
      
      
} 

OUTPUT :

Result of p & q = 0
Result of p | q = 54
Result of p ^ q = 54
Result of p << 1 = 68
Result of p >> 1 = 17
Result of p &^ q = 34

EXAMPLE 2 :

package main

import "fmt"

func main() {
	var x uint = 9  //0000 1001
	var y uint = 65 //0100 0001
	var z uint

	z = x & y
	fmt.Println("x & y  =", z)

	z = x | y
	fmt.Println("x | y  =", z)

	z = x ^ y
	fmt.Println("x ^ y  =", z)

	z = x << 1
	fmt.Println("x << 1 =", z)

	z = x >> 1
	fmt.Println("x >> 1 =", z)
}

OUTPUT :

x & y  = 1
x | y  = 73
x ^ y  = 72
x << 1 = 18
x >> 1 = 4

ASSIGNMENT OPERATORS :

EXAMPLE 1 :

package main 
    
import "fmt"
    
func main() { 
   var p int = 45
    var q int = 50
       
   // “=”(Simple Assignment) 
   p = q 
   fmt.Println(p) 
       
   // “+=”(Add Assignment) 
    p += q 
   fmt.Println(p) 
       
   //“-=”(Subtract Assignment) 
   p-=q 
   fmt.Println(p) 
       
   // “*=”(Multiply Assignment) 
   p*= q 
   fmt.Println(p) 
       
   // “/=”(Division Assignment) 
    p /= q 
   fmt.Println(p) 
      
    // “%=”(Modulus Assignment) 
    p %= q 
   fmt.Println(p) 
      
} 

OUTPUT :

50
100
50
2500
50
0

MISC OPERATORS :

EXAMPLE 1 :

package main 
    
import "fmt"
    
func main() { 
  a := 4
     
  // Using address of operator(&) and  
  // pointer indirection(*) operator 
  b := &a  
  fmt.Println(*b)  
  *b = 7 
  fmt.Println(a)  
} 

OUTPUT :

4
7






















